loki:
  auth_enabled: true # default is true
  # auth_enabled: false
  schemaConfig:
    configs:
      - from: "2024-04-01"
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h
  ingester:
    chunk_encoding: snappy
  querier:
    # Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing
    max_concurrent: 4
  pattern_ingester:
    enabled: true
  limits_config:
    allow_structured_metadata: true
    volume_enabled: true
    query_timeout: 3m # Timeout when querying backends (ingesters or storage) during the execution of a query request. Default is 1m. 
  storage:
    type: s3
    s3:
      s3: s3://sk-loki
      region: ap-northeast-1
      s3ForcePathStyle: true
    bucketNames:
      chunks: sk-loki
      ruler: sk-loki-ruler
      admin: sk-loki-admin
  commonConfig:
    replication_factor: 3
  tracing:
    enabled: true

deploymentMode: Distributed

gateway:
  nodeSelector:
    karpenter.sh/nodepool: arm64-nodepool
    karpenter.sh/capacity-type: on-demand
  replicas: 2
  affinity: # defaultのanti-affinityを無効化
  service:
    type: NodePort
    nodePort: 31100
ingester:
  nodeSelector:
    karpenter.sh/nodepool: arm64-nodepool
    karpenter.sh/capacity-type: on-demand
  replicas: 3 # To ensure data durability with replication
  affinity: # defaultのanti-affinityを無効化
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/component: ingester
querier:
  nodeSelector:
    karpenter.sh/nodepool: arm64-nodepool
    karpenter.sh/capacity-type: on-demand
  replicas: 3 # Improve query performance via parallelism
  maxUnavailable: 2
  affinity: # defaultのanti-affinityを無効化
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/component: querier
queryFrontend:
  nodeSelector:
    karpenter.sh/nodepool: arm64-nodepool
    karpenter.sh/capacity-type: on-demand
  replicas: 2
  maxUnavailable: 1
queryScheduler:
  nodeSelector:
    karpenter.sh/nodepool: arm64-nodepool
    karpenter.sh/capacity-type: on-demand
  replicas: 2
distributor:
  nodeSelector:
    karpenter.sh/nodepool: arm64-nodepool
    karpenter.sh/capacity-type: on-demand
  replicas: 3 
  maxUnavailable: 2
  affinity: # defaultのanti-affinityを無効化
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/component: distributor
compactor:
  nodeSelector:
    karpenter.sh/nodepool: arm64-nodepool
    karpenter.sh/capacity-type: on-demand
  replicas: 1
indexGateway:
  nodeSelector:
    karpenter.sh/nodepool: arm64-nodepool
    karpenter.sh/capacity-type: on-demand
  replicas: 2
  maxUnavailable: 1
resultsCache:
  nodeSelector:
    karpenter.sh/nodepool: arm64-nodepool
    karpenter.sh/capacity-type: on-demand
chunksCache:
  nodeSelector:
    karpenter.sh/nodepool: arm64-nodepool
    karpenter.sh/capacity-type: on-demand

# Disable (set 0) components that are not needed in Microservices Mode
test:
  enabled: false
lokiCanary:
  enabled: false
bloomPlanner:
  replicas: 0
bloomBuilder:
  replicas: 0
bloomGateway:
  replicas: 0

backend:
  replicas: 0
read:
  replicas: 0
write:
  replicas: 0

singleBinary:
  replicas: 0
