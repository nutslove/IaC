apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-thanos-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s

    remote_write:
      - url: http://thanos-routing-receiver.monitoring.svc:19291/api/v1/receive
        headers:
          THANOS-TENANT: test
        queue_config:
          capacity: 2500
          max_shards: 200
          max_samples_per_send: 500
          batch_send_deadline: 5s
          min_backoff: 30ms
          max_backoff: 100ms

    scrape_configs:
      - job_name: 'thanos-receiver'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace]
            regex: monitoring
            action: keep
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: thanos-ingesting-receiver
            action: keep
          - source_labels: [__meta_kubernetes_pod_ip]
            target_label: __address__
            replacement: ${1}:10902
        metric_relabel_configs:
          - target_label: component
            replacement: receiver

      - job_name: 'thanos-querier'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace]
            regex: monitoring
            action: keep
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: thanos-query
            action: keep
          - source_labels: [__meta_kubernetes_pod_ip]
            target_label: __address__
            replacement: ${1}:10902
        metric_relabel_configs:
          - target_label: component
            replacement: querier

      - job_name: 'thanos-query-frontend'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace]
            regex: monitoring
            action: keep
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: thanos-query-frontend
            action: keep
          - source_labels: [__meta_kubernetes_pod_ip]
            target_label: __address__
            replacement: ${1}:10902
        metric_relabel_configs:
          - target_label: component
            replacement: query-frontend

      - job_name: 'thanos-store'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace]
            regex: monitoring
            action: keep
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: thanos-store
            action: keep
          - source_labels: [__meta_kubernetes_pod_ip]
            target_label: __address__
            replacement: ${1}:10902
        metric_relabel_configs:
          - target_label: component
            replacement: store

      - job_name: 'thanos-compactor'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace]
            regex: monitoring
            action: keep
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: thanos-compactor
            action: keep
          - source_labels: [__meta_kubernetes_pod_ip]
            target_label: __address__
            replacement: ${1}:10902
        metric_relabel_configs:
          - target_label: component
            replacement: compactor

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-thanos
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-thanos
  template:
    metadata:
      labels:
        app: prometheus-thanos
    spec:
      nodeSelector:
        karpenter.sh/nodepool: arm64-nodepool
        karpenter.sh/capacity-type: on-demand
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --storage.tsdb.retention.time=2h
        - --web.enable-lifecycle
        - --web.enable-admin-api
        ports:
        - name: http
          containerPort: 9090
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: data
          mountPath: /prometheus
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1
            memory: 2Gi
      volumes:
      - name: config
        configMap:
          name: prometheus-thanos-config
      - name: data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-thanos
  namespace: monitoring
spec:
  type: NodePort
  selector:
    app: prometheus-thanos
  ports:
  - name: http
    port: 9090
    targetPort: http
    nodePort: 30000