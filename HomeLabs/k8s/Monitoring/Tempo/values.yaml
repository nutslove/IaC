tempo:
  mode: distributed
  storage:
    trace:
      backend: s3
      s3:
        endpoint: minio-dev.minio-dev.svc.cluster.local:9000
        bucket: tempo
        access_key: rrz64Sr26EBnfTRyGpWz
        secret_key: 5iOgDd0dXLJwmCjUPMiEKjfOX7v0QerxiWHyqoK6
        insecure: true
distributor:
  replicas: 2
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: distributor
                app.kubernetes.io/instance: tempo
                app.kubernetes.io/name: tempo
            topologyKey: topology.kubernetes.io/zone
          weight: 100
      requiredDuringSchedulingIgnoredDuringExecution: {}
ingester:
  replicas: 1
  max_block_duration: 5m
compactor:
  replicas: 1
querier:
  replicas: 2
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: querier
                app.kubernetes.io/instance: tempo
                app.kubernetes.io/name: tempo
            topologyKey: topology.kubernetes.io/zone
          weight: 100
      requiredDuringSchedulingIgnoredDuringExecution: {}
query_frontend:
  replicas: 2
minio:
  enabled: true
  accessKey: rrz64Sr26EBnfTRyGpWz
  secretKey: 5iOgDd0dXLJwmCjUPMiEKjfOX7v0QerxiWHyqoK6
  buckets:
    - name: tempo
      policy: none
      purge: false
# global:
#   clusterDomain: cluster.local
serviceMonitor:
  enabled: true
traces:
  otlp:
    grpc:
      enabled: true
    http:
      enabled: true